If directory listing is enabled, you can browse through the files and retrieve
the leaked information. The wget command retrieves content from web
servers. You can use wget in recursive mode (-r) to mass-download all files
stored within the specified directory and its subdirectories:
$ wget -r example.com/.git

But if directory listing isn’t enabled and the directory’s files are not
shown, you can still reconstruct the entire .git directory. First, you’ll need to
confirm that the folder’s contents are indeed available to the public. You can
do this by trying to access the directory’s config file:
$ curl https://example.com/.git/config
If this file is accessible, you might be able to download the Git direc-
tory’s entire contents so long as you understand the general structure of .git
directories. A .git directory is laid out in a specific way. When you execute
the following command in a Git repository, you should see contents resem-
bling the following:
$ ls .git

COMMIT_EDITMSG HEAD branches config description hooks index info logs objects refs

The output shown here lists a few standard files and folders that are
important for reconstructing the project’s source. In particular, the
/objects directory is used to store Git objects. This directory contains addi-
tional folders; each has two character names corresponding to the first two
characters of the SHA1 hash of the Git objects stored in it. Within these
subdirectories, you’ll find files named after the rest of the SHA1 hash of
the Git object stored in it. In other words, the Git object with a hash of
0a082f2656a655c8b0a87956c7bcdc93dfda23f8 will be stored with the filename of
082f2656a655c8b0a87956c7bcdc93dfda23f8 in the directory .git/objects/0a. For
example, the following command will return a list of folders:
$ ls .git/objects
00 0a 14 5a 64 6e 82 8c 96 a0 aa b4 be c8 d2 dc e6 f0 fa info pack
And this command will reveal the Git objects stored in a particular
folder:
$ ls .git/objects/0a
082f2656a655c8b0a87956c7bcdc93dfda23f8 4a1ee2f3a3d406411a72e1bea63507560092bd 66452433322af3d3
19a377415a890c70bbd263 8c20ea4482c6d2b0c9cdaf73d4b05c2c8c44e9 ee44c60c73c5a622bb1733338d3fa964
b333f0
0ec99d617a7b78c5466daa1e6317cbd8ee07cc 52113e4f248648117bc4511da04dd4634e6753
72e6850ef963c6aeee4121d38cf9de773865d8
330 Chapter 21
Git stores different types of objects in .git/objects: commits, trees, blobs, and
annotated tags. You can determine an object’s type by using this command:
$ git cat-file -t OBJECT-HASH
Commit objects store information such as the commit’s tree object hash,
parent commit, author, committer, date, and message of a commit. Tree objects
contain the directory listings for commits. Blob objects contain copies of files
that were committed (read: actual source code!). Finally, tag objects contain
information about tagged objects and their associated tag names. You can dis-
play the file associated with a Git object by using the following command:
$ git cat-file -p OBJECT-HASH
The /config file is the Git configuration file for the project, and the
/HEAD file contains a reference to the current branch:
$ cat .git/HEAD
ref: refs/heads/master
If you can’t access the /.git folder’s directory listing, you have to download
each file you want instead of recursively downloading from the directory
root. But how do you find out which files on the server are available when
object files have complex paths, such as .git/objects/0a/72e6850ef963c6aeee4121d
38cf9de773865d8?
You start with filepaths that you already know exist, like .git/HEAD!
Reading this file will give you a reference to the current branch (for example,
.git/refs/heads/master) that you can use to find more files on the system:
$ cat .git/HEAD
ref: refs/heads/master
$ cat .git/refs/heads/master
0a66452433322af3d319a377415a890c70bbd263
$ git cat-file -t 0a66452433322af3d319a377415a890c70bbd263
commit
$ git cat-file -p 0a66452433322af3d319a377415a890c70bbd263
tree 0a72e6850ef963c6aeee4121d38cf9de773865d8
The .git/refs/heads/master file will point you to the particular object
hash that stores the directory tree of the commit. From there, you
can see that the object is a commit and is associated with a tree object,
0a72e6850ef963c6aeee4121d38cf9de773865d8. Now examine that tree object:
$ git cat-file -p 0a72e6850ef963c6aeee4121d38cf9de773865d8
100644 blob 6ad5fb6b9a351a77c396b5f1163cc3b0abcde895 .gitignore
040000 blob 4b66088945aab8b967da07ddd8d3cf8c47a3f53c source.py
040000 blob 9a3227dca45b3977423bb1296bbc312316c2aa0d README
040000 tree 3b1127d12ee43977423bb1296b8900a316c2ee32 resources
Bingo! You discover some source code files and additional object trees
to explore.
Information Disclosure 331
On a remote server, your requests to discover the different files would
look a little different. For instance, you can use this URL to determine the
HEAD:
https://example.com/.git/HEAD
Use this URL to find the object stored in that HEAD:
https://example.com/.git/refs/heads/master
Use this URL to access the tree associated with the commit:
https://example.com/.git/objects/0a/72e6850ef963c6aeee4121d38cf9de773865d8
Finally, use this URL to download the source code stored in the
source.py file:
https://example.com/.git/objects/4b/66088945aab8b967da07ddd8d3cf8c47a3f53c
If you are downloading files from a remote server, you’ll also need to
decompress the downloaded object file before you read it. This can be done
using some code. You can decompress the object file by using Ruby, Python,
or your preferred language’s zlib library:
ruby -rzlib -e 'print Zlib::Inflate.new.inflate(STDIN.read)' < OBJECT_FILE
python -c 'import zlib, sys;
print repr(zlib.decompress(sys.stdin.read()))' < OBJECT_FIL


credits - Vickie Li
